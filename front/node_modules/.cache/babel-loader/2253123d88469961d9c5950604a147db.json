{"remainingRequest":"/Users/taese0ng/Desktop/ssss/front/node_modules/babel-loader/lib/index.js!/Users/taese0ng/Desktop/ssss/front/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/taese0ng/Desktop/ssss/front/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/taese0ng/Desktop/ssss/front/src/pages/test.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/taese0ng/Desktop/ssss/front/src/pages/test.vue","mtime":1583512918286},{"path":"/Users/taese0ng/Desktop/ssss/front/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/taese0ng/Desktop/ssss/front/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/taese0ng/Desktop/ssss/front/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/taese0ng/Desktop/ssss/front/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy9odHRwczovL20uYmxvZy5uYXZlci5jb20vUG9zdFZpZXcubmhuP2Jsb2dJZD1qaGM5NjM5JmxvZ05vPTIyMTE5NTk4NzQxNiZwcm94eVJlZmVyZXI9aHR0cHMlM0ElMkYlMkZ3d3cuZ29vZ2xlLmNvLmpwJTJGCmltcG9ydCAqIGFzIGQzIGZyb20gImQzIjsKaW1wb3J0ICogYXMgdG9wb2pzb24gZnJvbSAidG9wb2pzb24iOwppbXBvcnQgeyBtYXBHZXR0ZXJzIH0gZnJvbSAidnVleCI7Cgp2YXIga29yZWFNYXAgPSByZXF1aXJlKCIuLi9hc3NldHMvc2tvcmVhLXByb3ZpbmNlcy0yMDE4LXRvcG8tc2ltcGxlLmpzb24iKTsKCnZhciBtYXBJbmZvID0gW3sKICBuYW1lOiAi7ISc7Jq4IiwKICBsYXQ6ICIzNy41MzI2MDAiLAogIGxvbjogIjEyNy4wMjQ2MTIiCn0sIHsKICBuYW1lOiAi64yA7KCEIiwKICBsYXQ6ICIzNi4zNzMwMTc4IiwKICBsb246ICIxMjcuMjQ4MzczNiIKfSwgewogIG5hbWU6ICLrjIDqtawiLAogIGxhdDogIjM1LjgyMzc0NyIsCiAgbG9uOiAiMTI4LjU2NDMyMiIKfSwgewogIG5hbWU6ICLqsr3rtoEiLAogIGxhdDogIjM2LjQ1NzAzOCIsCiAgbG9uOiAiMTI4LjY4NTkwMCIKfSwgewogIG5hbWU6ICLqsr3quLAiLAogIGxhdDogIjM3LjU2MzE3NSIsCiAgbG9uOiAiMTI3LjM5MzIzMSIKfSwgewogIG5hbWU6ICLrtoDsgrAiLAogIGxhdDogIjM1LjE1ODc1NiIsCiAgbG9uOiAiMTI5LjA1NTMxMiIKfSwgewogIG5hbWU6ICLstqnrgqgiLAogIGxhdDogIjM2LjYwNDQxNyIsCiAgbG9uOiAiMTI2Ljc5NjQzNyIKfSwgewogIG5hbWU6ICLqsr3rgqgiLAogIGxhdDogIjM1LjQxNzg3NCIsCiAgbG9uOiAiMTI4LjEzODIyMCIKfSwgewogIG5hbWU6ICLqsJXsm5AiLAogIGxhdDogIjM3LjgzMDQ5MCIsCiAgbG9uOiAiMTI4LjIyODM5NiIKfSwgewogIG5hbWU6ICLsmrjsgrAiLAogIGxhdDogIjM1LjU0NTU5NyIsCiAgbG9uOiAiMTI5LjI1NzI3MyIKfSwgewogIG5hbWU6ICLstqnrtoEiLAogIGxhdDogIjM2Ljc5MDIxNSIsCiAgbG9uOiAiMTI3LjY4Mzg2MyIKfSwgewogIG5hbWU6ICLqtJHso7wiLAogIGxhdDogIjM1LjE1NTIyNyIsCiAgbG9uOiAiMTI2LjgzMDExNCIKfSwgewogIG5hbWU6ICLsnbjsspwiLAogIGxhdDogIjM3LjQ1MTE1MyIsCiAgbG9uOiAiMTI2LjY3MzYwOSIKfSwgewogIG5hbWU6ICLsoITrtoEiLAogIGxhdDogIjM1LjcyNDA1NSIsCiAgbG9uOiAiMTI3LjExNjY0NyIKfSwgewogIG5hbWU6ICLsoITrgqgiLAogIGxhdDogIjM0Ljg2MTc4OSIsCiAgbG9uOiAiMTI2Ljk0MjgyMiIKfSwgewogIG5hbWU6ICLsoJzso7wiLAogIGxhdDogIjMzLjQ2MjE2OSIsCiAgbG9uOiAiMTI2LjUyNTEwNSIKfSwgewogIG5hbWU6ICLshLjsooUiLAogIGxhdDogIjM2LjQ4NjM2NyIsCiAgbG9uOiAiMTI3LjI3NjM4NyIKfV07CmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAiSGVsbG9Xb3JsZCIsCiAgcHJvcHM6IHsKICAgIG1zZzogU3RyaW5nCiAgfSwKICBtb3VudGVkOiBmdW5jdGlvbiBtb3VudGVkKCkgewogICAgdGhpcy5kcmF3KCk7CiAgfSwKICBtZXRob2RzOiB7CiAgICBkcmF3OiBmdW5jdGlvbiBkcmF3KCkgewogICAgICB2YXIga29yZWFNYXAgPSByZXF1aXJlKCIuLi9hc3NldHMvc2tvcmVhLXByb3ZpbmNlcy0yMDE4LXRvcG8tc2ltcGxlLmpzb24iKTsKCiAgICAgIHZhciBnZW9qc29uID0gdG9wb2pzb24uZmVhdHVyZShrb3JlYU1hcCwga29yZWFNYXAub2JqZWN0cy5za29yZWFfcHJvdmluY2VzXzIwMThfZ2VvKTsKICAgICAgdmFyIGNlbnRlciA9IGQzLmdlb0NlbnRyb2lkKGdlb2pzb24pOwogICAgICB2YXIgd2lkdGggPSB0aGlzLiRzdG9yZS5zdGF0ZS5tYXBXaWR0aCArIDIwMDsKICAgICAgdmFyIGhlaWdodCA9IHdpZHRoOwogICAgICB2YXIgc3ZnID0gZDMuc2VsZWN0KCIuZDMiKS5hcHBlbmQoInN2ZyIpLmF0dHIoIndpZHRoIiwgd2lkdGgpLmF0dHIoImhlaWdodCIsIGhlaWdodCk7CiAgICAgIHZhciBwcm9qZWN0aW9uID0gZDMuZ2VvTWVyY2F0b3IoKS5zY2FsZSgxKS50cmFuc2xhdGUoWzAsIDBdKTsKICAgICAgdmFyIHBhdGggPSBkMy5nZW9QYXRoKCkucHJvamVjdGlvbihwcm9qZWN0aW9uKTsKICAgICAgdmFyIGJvdW5kcyA9IHBhdGguYm91bmRzKGdlb2pzb24pOwogICAgICB2YXIgd2lkdGhTY2FsZSA9IChib3VuZHNbMV1bMF0gLSBib3VuZHNbMF1bMF0pIC8gd2lkdGg7CiAgICAgIHZhciBoZWlnaHRTY2FsZSA9IChib3VuZHNbMV1bMV0gLSBib3VuZHNbMF1bMV0pIC8gaGVpZ2h0OwogICAgICB2YXIgc2NhbGUgPSAxIC8gTWF0aC5tYXgod2lkdGhTY2FsZSwgaGVpZ2h0U2NhbGUpOwogICAgICB2YXIgeG9mZnNldCA9IHdpZHRoIC8gMiAtIHNjYWxlICogKGJvdW5kc1sxXVswXSArIGJvdW5kc1swXVswXSkgLyAyICsgdGhpcy4kc3RvcmUuc3RhdGUuaXNNb2JpbGU7CiAgICAgIHZhciB5b2Zmc2V0ID0gaGVpZ2h0IC8gMiAtIHNjYWxlICogKGJvdW5kc1sxXVsxXSArIGJvdW5kc1swXVsxXSkgLyAyOwogICAgICB2YXIgb2Zmc2V0ID0gW3hvZmZzZXQsIHlvZmZzZXRdOwogICAgICBwcm9qZWN0aW9uLnNjYWxlKHNjYWxlKS50cmFuc2xhdGUob2Zmc2V0KTsKICAgICAgdmFyIG1hcCA9IHN2Zy5hcHBlbmQoImciKS5zZWxlY3RBbGwoInBhdGgiKS5kYXRhKGdlb2pzb24uZmVhdHVyZXMpLmVudGVyKCkuYXBwZW5kKCJwYXRoIikuYXR0cigiZCIsIHBhdGgpOwogICAgICB2YXIgaWNvbnMgPSBzdmcuYXBwZW5kKCJnIikuc2VsZWN0QWxsKCJzdmciKS5kYXRhKG1hcEluZm8pLmVudGVyKCkuYXBwZW5kKCJzdmc6aW1hZ2UiKS5hdHRyKCJ3aWR0aCIsIDUwKS5hdHRyKCJoZWlnaHQiLCA1MCkuYXR0cigieCIsIGZ1bmN0aW9uIChkKSB7CiAgICAgICAgcmV0dXJuIHByb2plY3Rpb24oW2QubG9uLCBkLmxhdF0pWzBdOwogICAgICB9KS5hdHRyKCJ5IiwgZnVuY3Rpb24gKGQpIHsKICAgICAgICByZXR1cm4gcHJvamVjdGlvbihbZC5sb24sIGQubGF0XSlbMV07CiAgICAgIH0pLmF0dHIoIm9wYWNpdHkiLCAxKS5hdHRyKCJ4bGluazpocmVmIiwgcmVxdWlyZSgiLi4vYXNzZXRzL2N5Y2xlLnN2ZyIpKTsKCiAgICAgIHZhciB6b29tZWQgPSBmdW5jdGlvbiB6b29tZWQoKSB7CiAgICAgICAgbWFwLmF0dHIoInRyYW5zZm9ybSIsIGQzLmV2ZW50LnRyYW5zZm9ybSk7CiAgICAgICAgaWNvbnMuYXR0cigidHJhbnNmb3JtIiwgZDMuZXZlbnQudHJhbnNmb3JtKTsKICAgICAgfTsKCiAgICAgIHZhciB6b29tID0gZDMuem9vbSgpLnNjYWxlRXh0ZW50KFsxLCA4XSkub24oInpvb20iLCB6b29tZWQpOyAvL3N2Zy5jYWxsKHpvb20pOwogICAgfQogIH0KfTs="},{"version":3,"sources":["test.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAiBA;AACA,OAAA,KAAA,EAAA,MAAA,IAAA;AACA,OAAA,KAAA,QAAA,MAAA,UAAA;AACA,SAAA,UAAA,QAAA,MAAA;;AACA,IAAA,QAAA,GAAA,OAAA,CAAA,kDAAA,CAAA;;AACA,IAAA,OAAA,GAAA,CACA;AACA,EAAA,IAAA,EAAA,IADA;AAEA,EAAA,GAAA,EAAA,WAFA;AAGA,EAAA,GAAA,EAAA;AAHA,CADA,EAMA;AACA,EAAA,IAAA,EAAA,IADA;AAEA,EAAA,GAAA,EAAA,YAFA;AAGA,EAAA,GAAA,EAAA;AAHA,CANA,EAWA;AACA,EAAA,IAAA,EAAA,IADA;AAEA,EAAA,GAAA,EAAA,WAFA;AAGA,EAAA,GAAA,EAAA;AAHA,CAXA,EAgBA;AACA,EAAA,IAAA,EAAA,IADA;AAEA,EAAA,GAAA,EAAA,WAFA;AAGA,EAAA,GAAA,EAAA;AAHA,CAhBA,EAqBA;AACA,EAAA,IAAA,EAAA,IADA;AAEA,EAAA,GAAA,EAAA,WAFA;AAGA,EAAA,GAAA,EAAA;AAHA,CArBA,EA0BA;AACA,EAAA,IAAA,EAAA,IADA;AAEA,EAAA,GAAA,EAAA,WAFA;AAGA,EAAA,GAAA,EAAA;AAHA,CA1BA,EA+BA;AACA,EAAA,IAAA,EAAA,IADA;AAEA,EAAA,GAAA,EAAA,WAFA;AAGA,EAAA,GAAA,EAAA;AAHA,CA/BA,EAoCA;AACA,EAAA,IAAA,EAAA,IADA;AAEA,EAAA,GAAA,EAAA,WAFA;AAGA,EAAA,GAAA,EAAA;AAHA,CApCA,EAyCA;AACA,EAAA,IAAA,EAAA,IADA;AAEA,EAAA,GAAA,EAAA,WAFA;AAGA,EAAA,GAAA,EAAA;AAHA,CAzCA,EA8CA;AACA,EAAA,IAAA,EAAA,IADA;AAEA,EAAA,GAAA,EAAA,WAFA;AAGA,EAAA,GAAA,EAAA;AAHA,CA9CA,EAmDA;AACA,EAAA,IAAA,EAAA,IADA;AAEA,EAAA,GAAA,EAAA,WAFA;AAGA,EAAA,GAAA,EAAA;AAHA,CAnDA,EAwDA;AACA,EAAA,IAAA,EAAA,IADA;AAEA,EAAA,GAAA,EAAA,WAFA;AAGA,EAAA,GAAA,EAAA;AAHA,CAxDA,EA6DA;AACA,EAAA,IAAA,EAAA,IADA;AAEA,EAAA,GAAA,EAAA,WAFA;AAGA,EAAA,GAAA,EAAA;AAHA,CA7DA,EAkEA;AACA,EAAA,IAAA,EAAA,IADA;AAEA,EAAA,GAAA,EAAA,WAFA;AAGA,EAAA,GAAA,EAAA;AAHA,CAlEA,EAuEA;AACA,EAAA,IAAA,EAAA,IADA;AAEA,EAAA,GAAA,EAAA,WAFA;AAGA,EAAA,GAAA,EAAA;AAHA,CAvEA,EA4EA;AACA,EAAA,IAAA,EAAA,IADA;AAEA,EAAA,GAAA,EAAA,WAFA;AAGA,EAAA,GAAA,EAAA;AAHA,CA5EA,EAiFA;AACA,EAAA,IAAA,EAAA,IADA;AAEA,EAAA,GAAA,EAAA,WAFA;AAGA,EAAA,GAAA,EAAA;AAHA,CAjFA,CAAA;AAuFA,eAAA;AACA,EAAA,IAAA,EAAA,YADA;AAEA,EAAA,KAAA,EAAA;AACA,IAAA,GAAA,EAAA;AADA,GAFA;AAKA,EAAA,OALA,qBAKA;AACA,SAAA,IAAA;AACA,GAPA;AAQA,EAAA,OAAA,EAAA;AACA,IAAA,IADA,kBACA;AACA,UAAA,QAAA,GAAA,OAAA,CAAA,kDAAA,CAAA;;AACA,UAAA,OAAA,GAAA,QAAA,CAAA,OAAA,CACA,QADA,EAEA,QAAA,CAAA,OAAA,CAAA,yBAFA,CAAA;AAIA,UAAA,MAAA,GAAA,EAAA,CAAA,WAAA,CAAA,OAAA,CAAA;AACA,UAAA,KAAA,GAAA,KAAA,MAAA,CAAA,KAAA,CAAA,QAAA,GAAA,GAAA;AACA,UAAA,MAAA,GAAA,KAAA;AACA,UAAA,GAAA,GAAA,EAAA,CACA,MADA,CACA,KADA,EAEA,MAFA,CAEA,KAFA,EAGA,IAHA,CAGA,OAHA,EAGA,KAHA,EAIA,IAJA,CAIA,QAJA,EAIA,MAJA,CAAA;AAKA,UAAA,UAAA,GAAA,EAAA,CACA,WADA,GAEA,KAFA,CAEA,CAFA,EAGA,SAHA,CAGA,CAAA,CAAA,EAAA,CAAA,CAHA,CAAA;AAIA,UAAA,IAAA,GAAA,EAAA,CAAA,OAAA,GAAA,UAAA,CAAA,UAAA,CAAA;AACA,UAAA,MAAA,GAAA,IAAA,CAAA,MAAA,CAAA,OAAA,CAAA;AACA,UAAA,UAAA,GAAA,CAAA,MAAA,CAAA,CAAA,CAAA,CAAA,CAAA,IAAA,MAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,IAAA,KAAA;AACA,UAAA,WAAA,GAAA,CAAA,MAAA,CAAA,CAAA,CAAA,CAAA,CAAA,IAAA,MAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,IAAA,MAAA;AACA,UAAA,KAAA,GAAA,IAAA,IAAA,CAAA,GAAA,CAAA,UAAA,EAAA,WAAA,CAAA;AACA,UAAA,OAAA,GACA,KAAA,GAAA,CAAA,GACA,KAAA,IAAA,MAAA,CAAA,CAAA,CAAA,CAAA,CAAA,IAAA,MAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CADA,GAEA,KAAA,MAAA,CAAA,KAAA,CAAA,QAHA;AAIA,UAAA,OAAA,GAAA,MAAA,GAAA,CAAA,GAAA,KAAA,IAAA,MAAA,CAAA,CAAA,CAAA,CAAA,CAAA,IAAA,MAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CAAA;AACA,UAAA,MAAA,GAAA,CAAA,OAAA,EAAA,OAAA,CAAA;AACA,MAAA,UAAA,CAAA,KAAA,CAAA,KAAA,EAAA,SAAA,CAAA,MAAA;AACA,UAAA,GAAA,GAAA,GAAA,CACA,MADA,CACA,GADA,EAEA,SAFA,CAEA,MAFA,EAGA,IAHA,CAGA,OAAA,CAAA,QAHA,EAIA,KAJA,GAKA,MALA,CAKA,MALA,EAMA,IANA,CAMA,GANA,EAMA,IANA,CAAA;AAOA,UAAA,KAAA,GAAA,GAAA,CACA,MADA,CACA,GADA,EAEA,SAFA,CAEA,KAFA,EAGA,IAHA,CAGA,OAHA,EAIA,KAJA,GAKA,MALA,CAKA,WALA,EAMA,IANA,CAMA,OANA,EAMA,EANA,EAOA,IAPA,CAOA,QAPA,EAOA,EAPA,EAQA,IARA,CAQA,GARA,EAQA,UAAA,CAAA;AAAA,eAAA,UAAA,CAAA,CAAA,CAAA,CAAA,GAAA,EAAA,CAAA,CAAA,GAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AAAA,OARA,EASA,IATA,CASA,GATA,EASA,UAAA,CAAA;AAAA,eAAA,UAAA,CAAA,CAAA,CAAA,CAAA,GAAA,EAAA,CAAA,CAAA,GAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AAAA,OATA,EAUA,IAVA,CAUA,SAVA,EAUA,CAVA,EAWA,IAXA,CAWA,YAXA,EAWA,OAAA,CAAA,qBAAA,CAXA,CAAA;;AAaA,UAAA,MAAA,GAAA,SAAA,MAAA,GAAA;AACA,QAAA,GAAA,CAAA,IAAA,CAAA,WAAA,EAAA,EAAA,CAAA,KAAA,CAAA,SAAA;AACA,QAAA,KAAA,CAAA,IAAA,CAAA,WAAA,EAAA,EAAA,CAAA,KAAA,CAAA,SAAA;AACA,OAHA;;AAIA,UAAA,IAAA,GAAA,EAAA,CACA,IADA,GAEA,WAFA,CAEA,CAAA,CAAA,EAAA,CAAA,CAFA,EAGA,EAHA,CAGA,MAHA,EAGA,MAHA,CAAA,CAtDA,CA0DA;AACA;AA5DA;AARA,CAAA","sourcesContent":["<template>\n  <div class=\"content\">\n    <div class=\"md-layout\">\n      <div\n        class=\"md-layout-item md-medium-size-100 md-xsmall-size-100 md-size-100\"\n      >\n        <md-card>\n          <md-card-content>\n            <div class=\"d3\"></div>\n          </md-card-content>\n        </md-card>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\n//https://m.blog.naver.com/PostView.nhn?blogId=jhc9639&logNo=221195987416&proxyReferer=https%3A%2F%2Fwww.google.co.jp%2F\nimport * as d3 from \"d3\";\nimport * as topojson from \"topojson\";\nimport { mapGetters } from \"vuex\";\nconst koreaMap = require(\"../assets/skorea-provinces-2018-topo-simple.json\");\nconst mapInfo = [\n  {\n    name: \"서울\",\n    lat: \"37.532600\",\n    lon: \"127.024612\"\n  },\n  {\n    name: \"대전\",\n    lat: \"36.3730178\",\n    lon: \"127.2483736\"\n  },\n  {\n    name: \"대구\",\n    lat: \"35.823747\",\n    lon: \"128.564322\"\n  },\n  {\n    name: \"경북\",\n    lat: \"36.457038\",\n    lon: \"128.685900\"\n  },\n  {\n    name: \"경기\",\n    lat: \"37.563175\",\n    lon: \"127.393231\"\n  },\n  {\n    name: \"부산\",\n    lat: \"35.158756\",\n    lon: \"129.055312\"\n  },\n  {\n    name: \"충남\",\n    lat: \"36.604417\",\n    lon: \"126.796437\"\n  },\n  {\n    name: \"경남\",\n    lat: \"35.417874\",\n    lon: \"128.138220\"\n  },\n  {\n    name: \"강원\",\n    lat: \"37.830490\",\n    lon: \"128.228396\"\n  },\n  {\n    name: \"울산\",\n    lat: \"35.545597\",\n    lon: \"129.257273\"\n  },\n  {\n    name: \"충북\",\n    lat: \"36.790215\",\n    lon: \"127.683863\"\n  },\n  {\n    name: \"광주\",\n    lat: \"35.155227\",\n    lon: \"126.830114\"\n  },\n  {\n    name: \"인천\",\n    lat: \"37.451153\",\n    lon: \"126.673609\"\n  },\n  {\n    name: \"전북\",\n    lat: \"35.724055\",\n    lon: \"127.116647\"\n  },\n  {\n    name: \"전남\",\n    lat: \"34.861789\",\n    lon: \"126.942822\"\n  },\n  {\n    name: \"제주\",\n    lat: \"33.462169\",\n    lon: \"126.525105\"\n  },\n  {\n    name: \"세종\",\n    lat: \"36.486367\",\n    lon: \"127.276387\"\n  }\n];\nexport default {\n  name: \"HelloWorld\",\n  props: {\n    msg: String\n  },\n  mounted() {\n    this.draw();\n  },\n  methods: {\n    draw() {\n      const koreaMap = require(\"../assets/skorea-provinces-2018-topo-simple.json\");\n      const geojson = topojson.feature(\n        koreaMap,\n        koreaMap.objects.skorea_provinces_2018_geo\n      );\n      const center = d3.geoCentroid(geojson);\n      const width = this.$store.state.mapWidth + 200;\n      const height = width;\n      const svg = d3\n        .select(\".d3\")\n        .append(\"svg\")\n        .attr(\"width\", width)\n        .attr(\"height\", height);\n      const projection = d3\n        .geoMercator()\n        .scale(1)\n        .translate([0, 0]);\n      const path = d3.geoPath().projection(projection);\n      const bounds = path.bounds(geojson);\n      const widthScale = (bounds[1][0] - bounds[0][0]) / width;\n      const heightScale = (bounds[1][1] - bounds[0][1]) / height;\n      const scale = 1 / Math.max(widthScale, heightScale);\n      const xoffset =\n        width / 2 -\n        (scale * (bounds[1][0] + bounds[0][0])) / 2 +\n        this.$store.state.isMobile;\n      const yoffset = height / 2 - (scale * (bounds[1][1] + bounds[0][1])) / 2;\n      const offset = [xoffset, yoffset];\n      projection.scale(scale).translate(offset);\n      const map = svg\n        .append(\"g\")\n        .selectAll(\"path\")\n        .data(geojson.features)\n        .enter()\n        .append(\"path\")\n        .attr(\"d\", path);\n      const icons = svg\n        .append(\"g\")\n        .selectAll(\"svg\")\n        .data(mapInfo)\n        .enter()\n        .append(\"svg:image\")\n        .attr(\"width\", 50)\n        .attr(\"height\", 50)\n        .attr(\"x\", d => projection([d.lon, d.lat])[0])\n        .attr(\"y\", d => projection([d.lon, d.lat])[1])\n        .attr(\"opacity\", 1)\n        .attr(\"xlink:href\", require(\"../assets/cycle.svg\"));\n\n      const zoomed = () => {\n        map.attr(\"transform\", d3.event.transform);\n        icons.attr(\"transform\", d3.event.transform);\n      };\n      const zoom = d3\n        .zoom()\n        .scaleExtent([1, 8])\n        .on(\"zoom\", zoomed);\n      //svg.call(zoom);\n    }\n  }\n};\n</script>\n<style>\n.d3 {\n  background: white;\n  width: 100%;\n  margin: 0 auto;\n}\npath {\n  fill: rgb(214, 236, 220);\n  stroke: rgb(240, 136, 115);\n}\n</style>\n"],"sourceRoot":"src/pages"}]}